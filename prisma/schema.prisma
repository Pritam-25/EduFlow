// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          Role         @default(USER)
  courses       Courses[]    @relation("CourseAuthor") //created courses
  enrollments   Enrollment[] // one user can enroll in many courses
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Courses {
  id               String       @id @unique
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel  @default(BEGINNER)
  category         category     @default(OTHER)
  smallDescription String
  slug             String       @unique
  states           States       @default(DRAFT)
  authorId         String
  author           User         @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  enrollments      Enrollment[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  course Courses @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // prevent duplicate enrollments
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum States {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum category {
  PROGRAMMING
  DESIGN
  MARKETING
  BUSINESS
  PERSONAL_DEVELOPMENT
  OTHER
}
